services:

  api:
    build: ./api
    ports:
      - "8000:8000"
    environment:
      - KAFKA_BROKER=kafka:9093
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - REDIS_URL=redis://redis:6379
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - FRONTEND_ORIGIN=http://localhost:3000,https://ddj1ndsf-3000.inc1.devtunnels.ms
    volumes:
      - ./api:/app
      - ./common:/common
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  ml_worker:
    build: ./ml_worker
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9093
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - REDIS_URL=redis://redis:6379
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - ANOMALY_KEYWORDS=error,failed,denied,exception,attack,unauthorized
      - WHITELISTED_IPS=192.168.1.1,10.0.0.1
    volumes:
      - ./ml_worker:/app
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep model.py | grep -v grep || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - api

  alerter:
    build: ./alerter
    depends_on:
      api:
        condition: service_started # Ensures API (and its topic creation) is ready
    environment:
      - KAFKA_BROKER=kafka:9093
      - REDIS_URL=redis://redis:6379
      # To enable notifications, uncomment and set your webhook URL below
      # or create a .env file with WEBHOOK_URL="your_url" and WEBHOOK_TYPE="slack|discord"
      # - WEBHOOK_URL=
    volumes:
      - ./alerter:/app

  vulnerable_api:
    build: ./vulnerable_api
    ports:
      - "8001:8001"
    depends_on:
      user_db:
        condition: service_healthy
    environment:
      - DB_HOST=user_db
      - DB_NAME=userdb
      - DB_USER=user
      - DB_PASS=password
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  user_db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_DB=userdb
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d userdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s"]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - es_data:/usr/share/elasticsearch/data
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '0.5'

  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.0
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      - KAFKA_LISTENERS=INTERNAL://:9093,EXTERNAL://:9092
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:9093,EXTERNAL://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=logs:1:1,config-updates:1:1,high-priority-alerts:1:1,alerter-config-updates:1:1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  schema-registry:
    image: confluentinc/cp-schema-registry:7.0.1
    ports:
      - "8081:8081"
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9093

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  es_data:
  user_db_data:
